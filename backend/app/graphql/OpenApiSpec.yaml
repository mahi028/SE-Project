openapi: 3.0.0
info:
  title: EZCare GraphQL API
  version: 1.0.0
  description: |
    GraphQL endpoint documentation for the EZCare Healthcare Platform.
    
    ## Available Queries
    - getToken - Authenticate user and get JWT token
    - register - Register new user
    - getSeniors - Get all senior citizens
    - getSenior - Get senior citizen by ID
    - getDoctors - Get all doctors (with optional pin/specialization filters)
    - getDoctor - Get doctor by ID
    - getAppointmentsForSenior - Get appointments for a senior citizen
    - getAppointmentsForDoctor - Get appointments for a doctor
    - getAppointmentsForDoctorSenior - Get appointments between a doctor and senior
    - getAvailableSlots - Get available appointment slots for a doctor
    - getGroups - Get groups (filtered by admin/pincode)
    - getGroupMembers - Get members of a group
    - getVitalTypes - Get all vital types
    - getVitalType - Get vital type by ID
    - getEmergencyContacts - Get emergency contacts for a senior
    - getDocReviews - Get reviews for a doctor
    - getAverageRating - Get average rating for a doctor
    - getReviewCount - Get review count for a doctor
    - getAllReviews - Get all reviews
    
    ## Available Mutations
    - addSenior - Add new senior citizen profile
    - updateSenior - Update existing senior citizen profile
    - addDoctor - Add new doctor profile
    - updateDoctor - Update existing doctor profile
    - bookAppointment - Book new appointment
    - updateAppointmentStatus - Update appointment status
    - cancelAppointment - Cancel an appointment
    - createGroup - Create a new group
    - joinGroup - Join an existing group
    - addVitalType - Add new vital type
    - updateVitalType - Update vital type
    - addEmergencyContact - Add emergency contact
    - updateEmergencyContact - Update emergency contact
    - addDocReview - Add doctor review

    ## User Lookup REST Endpoints
    - POST /user-lookup/register - Register user face using video
    - POST /user-lookup/recognize - Recognize user from photo

servers:
  - url: http://localhost:5000
    description: Development server

paths:
  /graphql:
    post:
      summary: GraphQL API Endpoint
      description: Handles authentication and user registration
      tags:
        - GraphQL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                variables:
                  type: object
            examples:
              getToken:
                summary: Get authentication token
                value:
                  query: |
                    {
                      getToken(ezId: "ez-doc-2507-0001", password: "userpass123") {
                        token
                        message
                        status
                      }
                    }
              register:
                summary: Register new user
                value:
                  query: |
                    mutation {
                      register(
                        email: "doctor@example.com"
                        role: 1
                        password: "securepass123"
                        confirmPassword: "securepass123"
                        name: "Dr. John Doe"
                        phoneNum: "1234567890"
                      ) {
                        message
                        status
                      }
                    }
              getSeniors:
                summary: Get all senior citizens
                value:
                  query: |
                    {
                      getSeniors {
                        senId
                        ezId
                        gender
                        dob
                        address
                        pincode
                        alternatePhoneNum
                        medicalInfo
                      }
                    }
              getDoctors:
                summary: Get doctors with optional filters
                value:
                  query: |
                    {
                      getDoctors(pin: "560001", specialization: "Cardiology") {
                        docId
                        ezId
                        gender
                        dob
                        address
                        pincode
                        alternatePhoneNum
                        licenseNumber
                        specialization
                        affiliation
                        qualification
                        experience
                        consultationFee
                        workingHours
                        availability
                        documents
                        appointmentWindow
                      }
                    }
              getDoctor:
                summary: Get doctor by ID
                value:
                  query: |
                    {
                      getDoctor(docId: 1) {
                        docId
                        ezId
                        gender
                        dob
                        address
                        pincode
                        alternatePhoneNum
                        licenseNumber
                        specialization
                        affiliation
                        qualification
                        experience
                        consultationFee
                        workingHours
                        availability
                        documents
                        appointmentWindow
                      }
                    }
              getAppointments:
                summary: Get appointments for a senior
                value:
                  query: |
                    {
                      getAppointmentsForSenior(senId: 1) {
                        appId
                        senId
                        docId
                        remTime
                        reason
                        status
                      }
                    }
              getAvailableSlots:
                summary: Get available slots for a doctor
                value:
                  query: |
                    {
                      getAvailableSlots(docId: 1, date: "2024-01-01") {
                        slots
                      }
                    }
              bookAppointment:
                summary: Book new appointment
                value:
                  query: |
                    mutation {
                      bookAppointment(
                        senId: 1
                        docId: 1
                        remTime: "2024-01-01T10:00:00Z"
                        reason: "Regular checkup"
                      ) {
                        message
                        status
                      }
                    }
              getGroups:
                summary: Get groups
                value:
                  query: |
                    {
                      getGroups(admin: 1, pincode: "560001") {
                        grpId
                        label
                        timing
                        admin
                        pincode
                        location
                        joinee {
                          senId
                          joinedAt
                        }
                      }
                    }
              getEmergencyContacts:
                summary: Get emergency contacts
                value:
                  query: |
                    {
                      getEmergencyContacts(senId: 1) {
                        contId
                        name
                        email
                        phoneNum
                        sendAlert
                        relationship
                      }
                    }
              addEmergencyContact:
                summary: Add emergency contact
                value:
                  query: |
                    mutation {
                      addEmergencyContact(
                        senId: 1
                        name: "John Smith"
                        email: "john@example.com"
                        phoneNum: "1234567890"
                        relationship: "Son"
                        sendAlert: true
                      ) {
                        message
                        status
                      }
                    }
              addDocReview:
                summary: Add doctor review
                value:
                  query: |
                    mutation {
                      addDocReview(
                        docId: 1
                        senId: 1
                        rating: 5
                        review: "Great doctor!"
                      ) {
                        message
                        status
                      }
                    }

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                tokenSuccess:
                  summary: Successful authentication
                  value:
                    data:
                      getToken:
                        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        message: null
                        status: null
                tokenError:
                  summary: Authentication failed
                  value:
                    data:
                      getToken:
                        token: null
                        message: "No user found"
                        status: 404
                registerSuccess:
                  summary: Registration successful
                  value:
                    data:
                      register:
                        message: "Registration successful."
                        status: 200
                registerError:
                  summary: Registration error
                  value:
                    data:
                      register:
                        message: "User with the given email already exists."
                        status: 409
                getSeniorsSuccess:
                  summary: Successfully retrieved seniors
                  value:
                    data:
                      getSeniors: [
                        {
                          "senId": 1,
                          "ezId": "ez-sen-1234",
                          "gender": "M",
                          "dob": "1950-01-01T00:00:00Z",
                          "address": "123 Main St",
                          "pincode": "560001",
                          "alternatePhoneNum": "9876543210",
                          "medicalInfo": {"conditions": ["diabetes"]}
                        }
                      ]
                getDoctorsSuccess:
                  summary: Successfully retrieved doctors
                  value:
                    data:
                      getDoctors: [
                        {
                          "docId": 1,
                          "ezId": "ez-doc-1234",
                          "gender": "M",
                          "dob": "1980-01-01T00:00:00Z",
                          "address": "123 Hospital St",
                          "pincode": "560001",
                          "alternatePhoneNum": "9876543210",
                          "licenseNumber": "MED123456",
                          "specialization": "Cardiology",
                          "affiliation": {"hospital": "City Hospital"},
                          "qualification": {"degree": "MBBS", "university": "Medical University"},
                          "experience": 10,
                          "consultationFee": 500.0,
                          "workingHours": "9:00-17:00",
                          "availability": {"monday": true, "tuesday": true},
                          "appointmentWindow": 30
                        }
                      ]
                addSeniorSuccess:
                  summary: Senior profile added successfully
                  value:
                    data:
                      addSenior:
                        message: "Senior added successfully"
                        status: 201
                getSeniorSuccess:
                  summary: Successfully retrieved senior
                  value:
                    data:
                      getSenior: {
                        "senId": 1,
                        "ezId": "ez-sen-1234",
                        "gender": "M",
                        "dob": "1950-01-01T00:00:00Z",
                        "address": "123 Main St",
                        "pincode": "560001",
                        "alternatePhoneNum": "9876543210",
                        "medicalInfo": {"conditions": ["diabetes"]}
                      }
                getSeniorError:
                  summary: Senior not found
                  value:
                    data:
                      getSenior: null
                doctorError:
                  summary: Doctor not found
                  value:
                    data:
                      getDoctor: null
                getAppointmentsSuccess:
                  summary: Successfully retrieved appointments
                  value:
                    data:
                      getAppointmentsForSenior: [
                        {
                          "appId": 1,
                          "senId": 1,
                          "docId": 1,
                          "remTime": "2024-01-01T10:00:00Z",
                          "reason": "Regular checkup",
                          "status": 0
                        }
                      ]
                bookAppointmentSuccess:
                  summary: Appointment booked successfully
                  value:
                    data:
                      bookAppointment:
                        message: "Appointment booked successfully with reminders"
                        status: 201
                getAvailableSlotsSuccess:
                  summary: Successfully retrieved available slots
                  value:
                    data:
                      getAvailableSlots: {
                        "slots": [
                          "09:00 AM",
                          "10:00 AM",
                          "11:00 AM",
                          "12:00 PM",
                          "01:00 PM",
                          "02:00 PM",
                          "03:00 PM",
                          "04:00 PM",
                          "05:00 PM"
                        ]
                      }
                getGroupsSuccess:
                  summary: Successfully retrieved groups
                  value:
                    data:
                      getGroups: [
                        {
                          "grpId": 1,
                          "label": "Diabetes Care",
                          "timing": "2024-01-01T10:00:00Z",
                          "admin": 1,
                          "pincode": "560001",
                          "location": "Community Center",
                          "joinee": [
                            {
                              "senId": 1,
                              "joinedAt": "2024-01-01T09:00:00Z"
                            }
                          ]
                        }
                      ]
                getGroupMembersSuccess:
                  summary: Successfully retrieved group members
                  value:
                    data:
                      getGroupMembers: [
                        {
                          "senId": 1,
                          "joinedAt": "2024-01-01T09:00:00Z"
                        }
                      ]
                getVitalTypesSuccess:
                  summary: Successfully retrieved vital types
                  value:
                    data:
                      getVitalTypes: [
                        {
                          "typeId": 1,
                          "label": "Blood Pressure",
                          "unit": "mmHg",
                          "threshold": {"low": 90, "high": 120}
                        }
                      ]
                getVitalTypeSuccess:
                  summary: Successfully retrieved vital type
                  value:
                    data:
                      getVitalType: {
                        "typeId": 1,
                        "label": "Blood Pressure",
                        "unit": "mmHg",
                        "threshold": {"low": 90, "high": 120}
                      }
                getEmergencyContactsSuccess:
                  summary: Successfully retrieved emergency contacts
                  value:
                    data:
                      getEmergencyContacts: [
                        {
                          "contId": 1,
                          "name": "John Smith",
                          "email": "john@example.com",
                          "phoneNum": "1234567890",
                          "sendAlert": true,
                          "relationship": "Son"
                        }
                      ]
                addEmergencyContactSuccess:
                  summary: Emergency contact added successfully
                  value:
                    data:
                      addEmergencyContact:
                        message: "Emergency contact added successfully"
                        status: 201
                addDocReviewSuccess:
                  summary: Doctor review added successfully
                  value:
                    data:
                      addDocReview:
                        message: "Review added successfully"
                        status: 201
                getDocReviewsSuccess:
                  summary: Successfully retrieved doctor reviews
                  value:
                    data:
                      getDocReviews: [
                        {
                          "reviewId": 1,
                          "docId": 1,
                          "senId": 1,
                          "rating": 5,
                          "review": "Great doctor!"
                        }
                      ]
                getAverageRatingSuccess:
                  summary: Successfully retrieved average rating
                  value:
                    data:
                      getAverageRating: 4.5
                getReviewCountSuccess:
                  summary: Successfully retrieved review count
                  value:
                    data:
                      getReviewCount: 10
                getAllReviewsSuccess:
                  summary: Successfully retrieved all reviews
                  value:
                    data:
                      getAllReviews: [
                        {
                          "reviewId": 1,
                          "docId": 1,
                          "senId": 1,
                          "rating": 5,
                          "review": "Great doctor!"
                        }
                      ]

  /user-lookup/register:
    post:
      summary: Register user face using video
      description: Register a user's face biometrics using a video file. Extracts multiple frames and creates face embeddings for recognition.
      tags:
        - User Lookup
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FaceRegistrationRequest'
            encoding:
              video:
                contentType: video/*
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceRegistrationResponse'
              example:
                message: "User registered successfully from video with 5 face embeddings"
                ez_id: "ez-sen-1234"
                total_embeddings: 5
                frames_processed: 15
        '400':
          description: Bad request - No video uploaded or insufficient faces detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                no_video:
                  summary: No video uploaded
                  value:
                    error: "No video uploaded"
                no_faces:
                  summary: No faces detected
                  value:
                    error: "No valid faces detected in the video. Please ensure the video contains clear, visible faces"
                insufficient_faces:
                  summary: Insufficient faces
                  value:
                    error: "At least 3 frames with valid faces are required for registration from video"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "User not Found!"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                processing_error:
                  summary: Processing error
                  value:
                    error: "Failed to process video!"
                storage_error:
                  summary: Storage error
                  value:
                    error: "Failed to store face embeddings"
                general_error:
                  summary: General error
                  value:
                    error: "Video registration failed! Try Again Later."

  /user-lookup/recognize:
    post:
      summary: Recognize user from photo
      description: Identify a user by comparing their face in a photo against registered face embeddings.
      tags:
        - User Lookup
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FaceRecognitionRequest'
            encoding:
              photo:
                contentType: image/*
      responses:
        '200':
          description: User(s) recognized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaceRecognitionResponse'
              example:
                matches:
                  - ez_id: "ez-sen-1234"
                    similarity: 0.85
                    confidence: "High"
                  - ez_id: "ez-sen-5678"
                    similarity: 0.72
                    confidence: "Medium"
        '400':
          description: Bad request - No photo uploaded or no face detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                no_photo:
                  summary: No photo uploaded
                  value:
                    error: "No photo uploaded"
                no_face:
                  summary: No face detected
                  value:
                    error: "No face detected in the uploaded photo. Please upload a clear image with a visible face"
        '404':
          description: No matching user found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
                  min_distance:
                    type: number
                    format: float
                    description: Minimum distance found (only present when no confident matches)
              examples:
                no_match:
                  summary: No matching user
                  value:
                    error: "No matching user found"
                    message: "The face in the photo doesn't match any registered users"
                low_confidence:
                  summary: Low confidence match
                  value:
                    error: "No matching user found"
                    message: "The face in the photo doesn't match any registered users with sufficient confidence"
                    min_distance: 0.8
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Recognition failed! Try Again."

components:
  schemas:
    AuthToken:
      type: object
      properties:
        token:
          type: string
          description: JWT authentication token
        message:
          type: string
          description: Error message if authentication fails
        status:
          type: integer
          enum: [200, 404]
          description: Response status code

    RegisterInput:
      type: object
      required:
        - email
        - role
        - password
        - confirmPassword
        - name
        - phoneNum
      properties:
        email:
          type: string
          format: email
        role:
          type: integer
          enum: [0, 1]
          description: "0 = Senior Citizen, 1 = Health Professional"
        password:
          type: string
          format: password
        confirmPassword:
          type: string
          format: password
        name:
          type: string
        phoneNum:
          type: string
          pattern: "^[0-9]{10}$"

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: integer
          enum: [200, 400, 402, 403, 409, 500]
          description: |
            Status codes:
            * 200 - Success
            * 400 - Insufficient information
            * 402 - Invalid role
            * 403 - Passwords don't match
            * 409 - Email exists
            * 500 - Server error

    SeniorInfo:
      type: object
      properties:
        senId:
          type: integer
          description: Unique identifier for senior citizen
        ezId:
          type: string
          description: EZCare ID of the senior citizen
        gender:
          type: string
          enum: [M, F, O]
        dob:
          type: string
          format: date-time
        address:
          type: string
        pincode:
          type: string
        alternatePhoneNum:
          type: string
        medicalInfo:
          type: object
          description: JSON object containing medical information

    AddSeniorInput:
      type: object
      required:
        - ezId
      properties:
        ezId:
          type: string
        gender:
          type: string
          enum: [M, F, O]
        dob:
          type: string
          format: date-time
        address:
          type: string
        pincode:
          type: string
        alternatePhoneNum:
          type: string
        medicalInfo:
          type: object

    GetSeniorInput:
      type: object
      required:
        - senId
      properties:
        senId:
          type: integer
          description: ID of the senior citizen to retrieve

    DoctorInfo:
      type: object
      properties:
        docId:
          type: integer
          description: Unique identifier for doctor
        ezId:
          type: string
          description: EZCare ID of the doctor
        gender:
          type: string
          enum: [M, F, O]
        dob:
          type: string
          format: date-time
        address:
          type: string
        pincode:
          type: string
        alternatePhoneNum:
          type: string
        licenseNumber:
          type: string
          description: Medical license number
        specialization:
          type: string
        affiliation:
          type: object
          description: JSON object containing hospital affiliation details
        qualification:
          type: object
          description: JSON object containing education details
        experience:
          type: integer
          description: Years of experience
        consultationFee:
          type: number
          format: float
        workingHours:
          type: string
        availability:
          type: object
          description: JSON object containing availability schedule
        documents:
          type: object
          description: JSON object containing document references
        appointmentWindow:
          type: integer
          description: Appointment duration in minutes

    DoctorFilters:
      type: object
      properties:
        pin:
          type: string
          description: Filter doctors by pincode
        specialization:
          type: string
          description: Filter doctors by specialization

    AppointmentInfo:
      type: object
      properties:
        appId:
          type: integer
          description: Unique identifier for appointment
        senId:
          type: integer
          description: Senior citizen ID
        docId:
          type: integer
          description: Doctor ID
        remTime:
          type: string
          format: date-time
          description: Appointment time
        reason:
          type: string
          description: Reason for appointment
        status:
          type: integer
          enum: [-1, 0, 1]
          description: "-1 = Cancelled, 0 = Pending, 1 = Confirmed"

    BookAppointmentInput:
      type: object
      required:
        - senId
        - docId
        - remTime
        - reason
      properties:
        senId:
          type: integer
        docId:
          type: integer
        remTime:
          type: string
          format: date-time
        reason:
          type: string

    UpdateAppointmentInput:
      type: object
      required:
        - appId
        - status
      properties:
        appId:
          type: integer
        status:
          type: integer
          enum: [-1, 1]
          description: "1 = Confirm, -1 = Reject"

    AvailableSlotsType:
      type: object
      properties:
        slots:
          type: array
          items:
            type: string
          description: List of available appointment time slots

    GroupInfo:
      type: object
      properties:
        grpId:
          type: integer
          description: Unique identifier for group
        label:
          type: string
        timing:
          type: string
          format: date-time
        admin:
          type: integer
          description: Senior ID of group admin
        pincode:
          type: string
        location:
          type: string
        joinee:
          type: array
          items:
            $ref: '#/components/schemas/JoineeInfo'

    JoineeInfo:
      type: object
      properties:
        senId:
          type: integer
        joinedAt:
          type: string
          format: date-time

    EmergencyContactInfo:
      type: object
      properties:
        contId:
          type: integer
        senId:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        phoneNum:
          type: string
        sendAlert:
          type: boolean
        relationship:
          type: string

    VitalTypeInfo:
      type: object
      properties:
        typeId:
          type: integer
        label:
          type: string
        unit:
          type: string
        threshold:
          type: object
          description: JSON object containing threshold values

    DocReviewInfo:
      type: object
      properties:
        reviewId:
          type: integer
        docId:
          type: integer
        senId:
          type: integer
        rating:
          type: integer
          minimum: 1
          maximum: 5
        review:
          type: string

    AddEmergencyContactInput:
      type: object
      required:
        - senId
        - name
      properties:
        senId:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        phoneNum:
          type: string
        relationship:
          type: string
        sendAlert:
          type: boolean

    CreateGroupInput:
      type: object
      required:
        - admin
        - label
        - timing
      properties:
        admin:
          type: integer
        label:
          type: string
        timing:
          type: string
          format: date-time
        location:
          type: string
        pincode:
          type: string

    AddDocReviewInput:
      type: object
      required:
        - docId
        - senId
        - rating
      properties:
        docId:
          type: integer
        senId:
          type: integer
        rating:
          type: integer
          minimum: 1
          maximum: 5
        review:
          type: string

    FaceRegistrationRequest:
      type: object
      required:
        - video
        - ez_id
      properties:
        video:
          type: string
          format: binary
          description: Video file for face registration (MP4, AVI, MOV, etc.)
        ez_id:
          type: string
          description: EZCare ID of the user to register
          example: "ez-sen-1234"

    FaceRegistrationResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
          example: "User registered successfully from video with 5 face embeddings"
        ez_id:
          type: string
          description: EZCare ID of the registered user
          example: "ez-sen-1234"
        total_embeddings:
          type: integer
          description: Number of face embeddings created
          example: 5
        frames_processed:
          type: integer
          description: Total number of video frames processed
          example: 15

    FaceRecognitionRequest:
      type: object
      required:
        - photo
      properties:
        photo:
          type: string
          format: binary
          description: Photo file for face recognition (JPG, PNG, etc.)

    FaceRecognitionResponse:
      type: object
      properties:
        matches:
          type: array
          items:
            $ref: '#/components/schemas/FaceMatch'
          description: Array of matching users with similarity scores

    FaceMatch:
      type: object
      properties:
        ez_id:
          type: string
          description: EZCare ID of matched user
          example: "ez-sen-1234"
        similarity:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Similarity score (higher is better match)
          example: 0.85
        confidence:
          type: string
          enum: [High, Medium, Low]
          description: Confidence level of the match
          example: "High"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "No video uploaded"
        message:
          type: string
          description: Additional error details
        min_distance:
          type: number
          format: float
          description: Minimum distance found (for recognition failures)

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

tags:
  - name: GraphQL
    description: GraphQL endpoint for main application features
  - name: User Lookup
    description: REST endpoints for face recognition and registration